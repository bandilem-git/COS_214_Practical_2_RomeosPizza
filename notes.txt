I gave the topping class the property of "Leaf". It indicates that it has no subclasses within the UML Class Diagram context.
- "It's a classification that signifies a class at the end of an inheritance chain, meaning you cannot create further derived classes from it."

I set the aggregation of the toppings member variable to shared because it represents a weak "whole-part" relationship (has-a relationship).
- This means that the part can exist independently of the whole.

(in the ToppingGroup i made it a vector instead of an array so can you change it from toppings : PizzaComponent* to toppings : vector<PizzaComponent> makes memory management easier in the long term)

in Menus class, pizzas and observers were made vectors

The whole composite class works 

PizzaOrder class is the context of the strategy pattern. 
- It's the client's responsibility to create the appropriate concrete strategy object and pass it to the context. So i put the switching between strategies in the TestingMain

state pattern idea:
- Pizza can be in 1 of 3 states:
1. Heating (Sitting in oven)
- Has oven number
- Has heated status of 1
2. Plated(ready to be served)
- can transition to boxed or be reverted to heating(Maybe customer wants a lil bit of a chared crust)
- has heated status of 0
- has heatingplate number
3. Boxed(Ready to be delivered)
- cannot be heated (heated status of -1).